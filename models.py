from flask_login import UserMixinfrom extensions import db# Модель пользователяclass User(UserMixin, db.Model):    id = db.Column(db.Integer, primary_key=True)    username = db.Column(db.String(80), unique=True, nullable=False)    password = db.Column(db.String(120), nullable=False)    is_admin = db.Column(db.Boolean, default=False)    availabilities = db.relationship('Availability', backref='teacher', lazy=True)    def __repr__(self):        return f'<User {self.username}>'# Модель датыclass Date(db.Model):    id = db.Column(db.Integer, primary_key=True)    date = db.Column(db.String(20), nullable=False)    availabilities = db.relationship('Availability', backref='date', lazy=True)    def __repr__(self):        return f'<Date {self.date}>'# Модель предметаclass Subject(db.Model):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String(80), unique=True, nullable=False)    availabilities = db.relationship('Availability', backref='subject', lazy=True)    def __repr__(self):        return f'<Subject {self.name}>'# Модель доступностиclass Availability(db.Model):    id = db.Column(db.Integer, primary_key=True)    date_id = db.Column(db.Integer, db.ForeignKey('date.id'), nullable=False)    subject_id = db.Column(db.Integer, db.ForeignKey('subject.id'), nullable=False)    teacher_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)    start_time = db.Column(db.Time, nullable=False)    end_time = db.Column(db.Time, nullable=False)    duration = db.Column(db.String(20), nullable=False)    appointment = db.relationship('Appointment', backref='availability', uselist=False)    def __repr__(self):        return f'<Availability {self.date_id} {self.subject_id} {self.teacher_id} {self.start_time}>'# Модель доступностиclass Appointment(db.Model):    id = db.Column(db.Integer, primary_key=True)    availability_id = db.Column(db.Integer, db.ForeignKey('availability.id'), nullable=False)    fio = db.Column(db.String(255), nullable=False)    def __repr__(self):        return f'<Appointment {self.fio} {self.availability_id}>'